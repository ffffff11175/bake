package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"bake/internal/utils"
)

type TemplateData struct {
	PackageName   string
	StructName    string
	TableName     string
	Columns       []TemplateColumn
	HasTimeFields bool
}

type TemplateColumn struct {
	DBName  string
	GoName  string
	GoType  string
	Comment string
}

func GeneratePackageFile(outputDir, packageName string) error {
	filePath := filepath.Join(outputDir, "package.go")
	content := fmt.Sprintf("// Code generated by bake. DO NOT EDIT.\n\npackage %s\n", packageName)

	return os.WriteFile(filePath, []byte(content), 0644)
}

func GenerateModelFile(tmpl *template.Template, outputDir, packageName string, table Table) error {

	var columns []TemplateColumn
	hasTimeFields := false

	for _, col := range table.Columns {
		goType := MapSQLTypeToGoType(col.Type, col.Nullable)
		if goType == "time.Time" || goType == "*time.Time" {
			hasTimeFields = true
		}

		columns = append(columns, TemplateColumn{
			DBName:  col.Name,
			GoName:  utils.ToCamelCase(col.Name),
			GoType:  goType,
			Comment: col.Comment,
		})
	}

	structName := utils.ToCamelCase(table.Name)

	data := TemplateData{
		PackageName:   packageName,
		StructName:    structName,
		TableName:     table.Name,
		Columns:       columns,
		HasTimeFields: hasTimeFields,
	}

	outputPath := filepath.Join(outputDir, fmt.Sprintf("%s.go", strings.ToLower(table.Name)))
	file, err := os.Create(outputPath)
	if err != nil {
		return err
	}
	defer file.Close()

	// 添加文件头
	file.WriteString("// Code generated by bake. DO NOT EDIT.\n\n")

	// 执行模板
	return tmpl.Execute(file, data)
}
